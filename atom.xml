<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thouther</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://thouther.github.io/blog/"/>
  <updated>2019-06-02T17:18:53.913Z</updated>
  <id>https://thouther.github.io/blog/</id>
  
  <author>
    <name>thouther</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arch上手记录-i3+cli两大邪教</title>
    <link href="https://thouther.github.io/blog/2019/06/02/Arch%E4%B8%8A%E6%89%8B%E8%AE%B0%E5%BD%95-Tiling-cli%E4%B8%A4%E5%A4%A7%E9%82%AA%E6%95%99/"/>
    <id>https://thouther.github.io/blog/2019/06/02/Arch上手记录-Tiling-cli两大邪教/</id>
    <published>2019-06-01T17:29:39.000Z</published>
    <updated>2019-06-02T17:18:53.913Z</updated>
    
    <content type="html"><![CDATA[<p>前文：</p><p>进入正题，利用i3+CLI打造一个彻底摆脱鼠标的操作环境</p><h2 id="什么是窗口管理器"><a href="#什么是窗口管理器" class="headerlink" title="什么是窗口管理器"></a>什么是窗口管理器</h2><p>一个桌面环境通常包含几大核心组件，窗口管理器便是其中之一，主要负责用户对桌面窗口的交互行为。通常包含两种类型的窗口管理：</p><ol><li><p>Stacking</p><p>堆叠式窗口，最为普遍的类型，一般以鼠标操作为主，键盘辅助，可以任意拖动浮动窗口，窗口与窗口之间能够互相堆加在一起。Win，Mac以及大部分主流Linux桌面都采用堆叠窗口。</p></li><li><p>Tiling</p><p>平铺式窗口，以键盘为操作核心的形式，抛弃了大部分鼠标操作，利用快捷键创建新窗口，同时管理器会自动调整新窗口位置，通过平铺形式提升界面的利用率。</p></li><li><p>Dynamic</p><p>动态式窗口，可以随时切换上述两种风格，调整窗口大小。目前流行的非堆叠管理器都是以动态式为主，默认为Tiling模式。上手难度都比较大，需要花时间阅读说明书修改配置文件，并且不包含图形设置界面。</p></li></ol><p>常见的WM例如i3，bspwm，Awesome，Openbox，dwm等等，这里选择了最适合入门的i3(下面提到)。</p><p>扩展：<a href="https://wiki.archlinux.org/index.php/window_manager" target="_blank" rel="noopener">Window Manager介绍</a></p><h2 id="什么是CLI"><a href="#什么是CLI" class="headerlink" title="什么是CLI"></a>什么是CLI</h2><p>Command Line Interface(命令行界面)，抛弃图形界面，以终端交互的形式进行运作的软件，通常都拥有以下几种属性：</p><ol><li>轻量级</li><li>高效率，主打快捷键</li><li>界面简洁透明</li><li>可扩展性强</li></ol><p>同时上手成本较高也是一个共同点，学会查阅文档是使用CLI应用的第一前提。</p><h2 id="i3-Cli"><a href="#i3-Cli" class="headerlink" title="i3+Cli"></a>i3+Cli</h2><p>专注于终端键盘操作这一性质完美契合了Tiling的逻辑，两者结合可以彻底放弃对鼠标的依赖(有触摸板的情况下还是会方便很多)</p><p><img src="https://i.loli.net/2019/06/02/5cf398f4e92f469629.png" alt=""></p><h2 id="Core"><a href="#Core" class="headerlink" title="[Core]"></a>[Core]</h2><h3 id="yay"><a href="#yay" class="headerlink" title="yay"></a>yay</h3><p>系统安装完成后，优先级第一的事情就是想办法接入AUR仓库，以下所有软件都可以在AUR中找到。</p><p>AUR即Arch User Repository，经由社区用户提交并维护的软件仓库，采用编写PKGBUILD的形式，PKGBUILD文件中包含了指定软件的下载和拆包，获取源码后再次进行重新编译，而实现整个流程并包括解决最麻烦的编译工具和依赖问题，则需要一个AUR helper来完成.</p><p>yay(Yet another Yogurt)，Go语言编写，代替不再维护的Yogurt，是目前Arch系中最受推崇的AUR helper。</p><p><img src="https://i.loli.net/2019/06/02/5cf3dbcdbcb2b73564.png" alt=""></p><p>下载：</p><ol><li><a href="https://github.com/Jguer/yay" target="_blank" rel="noopener">Github地址</a></li><li>直接输入命令</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://aur.archlinux.org/yay.git</span><br><span class="line">cd yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="i3"><a href="#i3" class="headerlink" title="i3"></a>i3</h3><p>如果快速体验Tiling窗口的高效简洁，i3是非常不错的选择。相比同类软件，i3在功能上相对偏少，不过胜在配置简单易懂，官网附带详细的说明文档，非常适合新人上手。</p><p>不过原版的i3wm缺少gaps功能，无法实现窗口之间的间隔，所以安装的时候选择另外一个fork版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay i3-gaps</span><br></pre></td></tr></table></figure><p>配置文件在<code>~/.config/i3/config</code></p><p>###　zsh</p><p>Z Shell，作为Bash的同类，增加大量新特性，支持插件和主题，让命令行操作变得更加现代化</p><p>完整zsh安装，包括目前在用的插件和主题，步骤如下</p><ol><li><p>安装Zsh本体</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yay zsh</span><br></pre></td></tr></table></figure></li><li><p>安装Oh-My-Zsh</p><p>现成的Zsh配置，自带主题和插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure></li><li><p>安装Powerlevel9K主题</p><p>强大的可自定义主题，详细配置参考<a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">Github</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay zsh-theme-powerlevel9k</span><br></pre></td></tr></table></figure><p>然后在<code>~/.zshrc</code>中加入<code>POWERLEVEL9K_MODE=&#39;awesome-fontconfig&#39;</code></p></li><li><p>安装Powerline Font</p><p>使zsh主题中的特殊图标能够正常显示</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay awesome-terminal-fonts</span><br></pre></td></tr></table></figure></li><li><p>启动插件</p><p>之前的Ubuntu上手记录也安装了Zsh，不过当时体验尚浅，没有了解到zsh插件是何等便利的存在，下面我启用的插件，详细的插件作用参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">Wiki/Plugin</a>，配置出合适自己的组合，能够让你的shell变得爱不释手</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">        git</span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">        zsh-syntax-highlighting</span><br><span class="line">        themes</span><br><span class="line">        rand-quote</span><br><span class="line">        systemd</span><br><span class="line">        colored-man-pages</span><br><span class="line">        colorize</span><br><span class="line">        command-not-found</span><br><span class="line">        history</span><br><span class="line">        dirpersist</span><br><span class="line">        copydir</span><br><span class="line">        dircycle</span><br><span class="line">        jump</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li></ol><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>Vim，唯二的编辑器之一。学习Vim的语言彻底刷新我对Text Editor的想法，详细的介绍以后会另开一篇文章。</p><p>此外想在Tiling环境变得更畅通无阻，Vim语言是最好的通行证，不过默认的Vim实在缺乏吸引力，空手配置<code>.vimrc</code>容易崩溃，好在有现成的Vim套餐——<a href="https://github.com/liuchengxu/space-vim-dark" target="_blank" rel="noopener">Space-vim</a></p><p><img src="https://i.loli.net/2019/06/03/5cf3f72835ba279022.png" alt=""></p><p>简单来讲就是多个Vim插件的合集，同时改变配置文本的规则，以及模块化的插件管理方式(参考<a href="https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md" target="_blank" rel="noopener">Layer</a>)，更适合新人快速上手。</p><p>配置文件从<code>~/.vimrc</code>改为<code>~/.spacevim</code>，方便日后卸载时不影响到原vimrc的配置</p><h3 id="Termite"><a href="#Termite" class="headerlink" title="Termite"></a>Termite</h3><p>既然是以终端操作为驱动，当然得选择一个合适的Terminal模拟器，然而试用完网上推荐的几种terminal之后发现各有各的问题…</p><ul><li>urxvt，对图标字符支持很糟糕</li><li>xterm，美化支持糟糕</li><li>st，配置方式太奇葩，加上补丁打不上</li><li>kitty，不支持NerdFont字体</li></ul><p>……最后找到了Termite，虽然在图片显示上会有小bug，幸好其他基本完美，配置文件非常简单，关于终端的折腾可以暂告一段落。</p><p>安装如下，配置文件在<code>~/.config/termite/config</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yay termite</span><br></pre></td></tr></table></figure><h3 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h3><p>内置vim-key的cli文件管理器，熟练常用快捷键再搭配vim语法，能打到吊打GUI的高速编辑效果。</p><p><img src="https://i.loli.net/2019/06/03/5cf3ffcc7344b50388.png" alt=""></p><p>安装如下，配置文件在<code>~/.config/ranger/rc.conf</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yay ranger</span><br></pre></td></tr></table></figure><h2 id="Community"><a href="#Community" class="headerlink" title="[Community]"></a>[Community]</h2><h3 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h3><p>多终端管理工具，简单的说就是在一个大终端窗口下管理多个小终端，同时保存布局，窗口挂起，下次要用的时候可以快速回到原本状态</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yay tmux</span><br></pre></td></tr></table></figure><p>默认的tmux以及快捷键配置并不那么人性化，于是出现类似oh-my-zsh的现成配置<a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">.tmux</a>，配置文件从<code>~/.tmux</code>改为<code>~/.tmux.conf.local</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">git clone https://github.com/gpakosz/.tmux.git</span><br><span class="line">ln -s -f .tmux/.tmux.conf</span><br><span class="line">cp .tmux/.tmux.conf.local .</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/03/5cf402a98d51c72627.png" alt=""></p><h3 id="Compton"><a href="#Compton" class="headerlink" title="Compton"></a>Compton</h3><p>给窗口界面带来毛玻璃､阴影透明､淡入淡出等时髦效果的合成管理器，另外默认compton并不支持毛玻璃，所以这里安装另一个fork版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yay compton-tryone-git</span><br></pre></td></tr></table></figure><p>之后在<code>~/.config/i3/config</code>中加入<code>exec --no-start-id compton --blur-method kawase</code>，便能够实现自启动了</p><h3 id="rofi"><a href="#rofi" class="headerlink" title="rofi"></a>rofi</h3><h3 id="dunst"><a href="#dunst" class="headerlink" title="dunst"></a>dunst</h3><h3 id="tlp"><a href="#tlp" class="headerlink" title="tlp"></a>tlp</h3><h3 id="mpd-ncmpcpp-cmus"><a href="#mpd-ncmpcpp-cmus" class="headerlink" title="mpd + ncmpcpp / cmus"></a>mpd + ncmpcpp / cmus</h3><h3 id="zathura"><a href="#zathura" class="headerlink" title="zathura"></a>zathura</h3><h3 id="mpv"><a href="#mpv" class="headerlink" title="mpv"></a>mpv</h3><h3 id="qemu-kvm"><a href="#qemu-kvm" class="headerlink" title="qemu/kvm"></a>qemu/kvm</h3><h3 id="mutt"><a href="#mutt" class="headerlink" title="mutt"></a>mutt</h3><h3 id="weechat"><a href="#weechat" class="headerlink" title="weechat"></a>weechat</h3><h2 id="Extra"><a href="#Extra" class="headerlink" title="[Extra]"></a>[Extra]</h2><h3 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h3><h3 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h3><h3 id="gotop"><a href="#gotop" class="headerlink" title="gotop"></a>gotop</h3><h3 id="taskbook"><a href="#taskbook" class="headerlink" title="taskbook"></a>taskbook</h3><h3 id="youtube-dl"><a href="#youtube-dl" class="headerlink" title="youtube-dl"></a>youtube-dl</h3><h2 id="Link"><a href="#Link" class="headerlink" title="[Link]"></a>[Link]</h2><p><a href="https://wiki.archlinux.org/index.php/List_of_applications" target="_blank" rel="noopener">List of applications</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前文：&lt;/p&gt;
&lt;p&gt;进入正题，利用i3+CLI打造一个彻底摆脱鼠标的操作环境&lt;/p&gt;
&lt;h2 id=&quot;什么是窗口管理器&quot;&gt;&lt;a href=&quot;#什么是窗口管理器&quot; class=&quot;headerlink&quot; title=&quot;什么是窗口管理器&quot;&gt;&lt;/a&gt;什么是窗口管理器&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu上手记录-删除系统并踏上Arch之道</title>
    <link href="https://thouther.github.io/blog/2019/05/27/Ubuntu%E4%B8%8A%E6%89%8B%E8%AE%B0%E5%BD%95-%E5%88%A0%E9%99%A4%E7%B3%BB%E7%BB%9F%E5%B9%B6%E8%B8%8F%E4%B8%8AArch%E4%B9%8B%E9%81%93%E7%AF%87/"/>
    <id>https://thouther.github.io/blog/2019/05/27/Ubuntu上手记录-删除系统并踏上Arch之道篇/</id>
    <published>2019-05-27T03:00:44.000Z</published>
    <updated>2019-06-02T15:42:57.340Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>四个月下来我的Linux体验发生很大的变化，从Ubuntu转到了Arch Linux，从十几年的键鼠习惯转到了纯键盘(和触摸板)，手上的matebook从市场新宠成了绝版之子……</p><p>本文不会涉及Arch系统的安装，主要是记录了最近更换系统后的感想以及用户体验的变化。</p><p>Keep it Simple,Stupid!</p></blockquote><h2 id="From-Ubuntu…"><a href="#From-Ubuntu…" class="headerlink" title="From Ubuntu…"></a>From Ubuntu…</h2><p>Ubuntu用了接近四个月，功能可以说应有尽有，满足了大部分日常需要，Gnome丰富的插件又大大加强了操作体验，整个Linux环境可以说是越来越得心应手………这时候你会萌生一个想法————把Ubuntu删了。</p><p>有这种想法并不觉得意外，因为回头一看，这不就是以前追求精简Win7+绿色软件的套路吗，只是加上了一层Linux和Terminal的滤镜。体验是上去了，但效率并没有多少提升：</p><ul><li><p>窗口数量一旦增多，管理起来仍旧会陷入混乱，workspace都拯救不了；</p></li><li><p>避免不了要在键盘和鼠标之间切换，触摸板除了滑动页面之外的操作都有种迷之尴尬；</p></li><li><p>无意义的标题栏，多余的信息显示，13寸的屏幕下变得非常碍眼；</p></li><li><p>动画效果总有明显的卡顿，最直观地感受到gnome的笨重…</p></li></ul><p>于是扔掉Gnome，加入Tiling的邪教，但是根本的问题并没有解决：</p><p>​    1.整个Ubuntu环境的臃肿，远不止几个预装软件这么简单；</p><p>​    2.一言难尽的apt包管理，强迫你体验所有形式的安装手段，最终走上了透支寿命的“编译—&gt;报错”依赖地狱。</p><p>更换系统的成本让我忍住了第1条，但是第2条让我这个折腾怪都顶不住了，因为一个无头无脑的error耗费了大量的时间，无论最后问题解决与否都只会让我觉得怀疑人生。</p><h2 id="To-Arch-Linux"><a href="#To-Arch-Linux" class="headerlink" title="To Arch Linux!"></a>To Arch Linux!</h2><p>总结一下现在我对Linux的要求：</p><ol><li><p>透明，干净，极简化的系统安装</p></li><li><p>高效完善的包管理，以及丰富的社区资源</p></li></ol><p>在庞大的Linux发行版世界中，轻量级的系统可以说各有千秋，但是谈到方便的包管理，Arch系的pacman加上资源极其丰富的AUR(Arch User Repository)，综合多位用户体验得出一个吊打全场的评价，非常具有吸引力，下一个系统已经很明确了。</p><h2 id="The-Arch-Way"><a href="#The-Arch-Way" class="headerlink" title="The Arch Way"></a>The Arch Way</h2><p>过一个周末的操作，终于成功地将系统迁移到了Arch，详细的安装过程以后重开一篇文章。</p><p>先来介绍下Arch Linux的特点：</p><ol><li>轻量级系统，遵循KISS原则，提倡用户的自由度，软件的选择权，系统的打造，一切都由用户决定；</li><li>采用滚动更新，保证一切软件都是最新版，收益与风险并存；</li><li>强大的社区驱动之一：由用户自行提交的软件仓库AUR，拥有目前来说可能是最丰富的资源，解决了大量无比要的安装烦恼；</li><li>强大的社区驱动之二：具有深度的用户群体，Arch的Wiki是深入Linux的一大圣地；</li><li>针对x86-64架构的优化，加上轻量化而省去了许多复杂的兼容问题，天生具有明显的性能优势</li></ol><p>以上几点还不足以涵盖Arch的所有亮点，登上Arch官网甚至看不到任何形式的宣传，但是Arch早就在Linux用户圈中享有了一定的名气，不是上面的优势。而是出了名的“劝退”：</p><ol><li>纯命令行安装。尽管wiki上详尽的步骤详解，但这点还是挡住了许多跃跃欲试Arch的选手</li><li>过于精简所带来的折腾成本。解决了第一点不代表后面就一帆风顺了，上了Arch的贼船只保证系统可以正常启动，剩下的什么蓝牙，声音，显卡，电源，甚至是网络连接，这些最基础的设施其实都算“多余”的。 </li></ol><p>较高的起步门槛+对用户选择权的重视，不难理解Arch在Linux用户群中形成的装逼之风，在r/unixporn之类的晒桌面交流中也有很高的出镜率。虽然理论上任何Linux发行版都支持用户的自定义，但是Arch更倾向于让用户去主动地进行选择，打造一个属于自己的Linux环境。</p><p>在主打自定义的发行版圈子中，有Gentoo这种深入定制内核，一切采用源码编译的零加工系统，还有LFS(Linux From Scratch)这种真正从零开始的硬核玩法。Arch反而是属于低成本的入门级自定义，包管理的成熟又让用户可以高效地开展折腾环节，成为了大多数折腾怪心中的首选系统。</p><h2 id="More-is-Less"><a href="#More-is-Less" class="headerlink" title="More is Less"></a>More is Less</h2><p>有人认为Arch一上来就是纯命令行安装，是在给想要接触Arch的用户添堵，一边翻说明书一边操作的原始风格，用户体验几乎为零，如果是在手机等其他面向终端用户的领域，这种玩法不像发烧，更像自燃。因为消费者是上帝，交易双方从来不对等，首先满足消费者的需要才能保证不被市场淘汰。</p><p>回想一下，由于Windows的统治，我们自从接触计算机的那一刻起，图形界面就是电脑的接口，从来没有质疑过这一点的正确性，对着一块黑屏狂敲代码的场景仿佛只会出现在书上。不管你现在是Mac用户，还是Linux或BSD用户，没人会说自己不会用Windows，微软成功地将其简易性普及给了全世界的计算机用户，但也仅此而已，一旦试图想要接近希望有所了解，很快就会感受Windows这头庞然大物才是真正的高不可攀，GUI的累赘无限放大了系统的复杂程度。然而普通用户没必要去了解Windows的内部，微软也不会干这么吃力不讨好的事情。假如你对计算机充满热情，Windows显然不是一个好归属。</p><p>再仔细思考会得出一个奇怪的结论：学习Linux可能比学Windows要“简单”。尽管大学里都有教授Linux的课程，却没有教大家如何使用Windows，毕竟每个大学生天天都在用，但实际上又多少人真正理解，因为根本无从下手。</p><p>到了Linux的世界，排除企业版之类的特殊需求，Linux完全是由爱好者们组建起来的圈子，在没有市场因素的驱动下，用户/管理员/开发者之间就没有绝对的界限。所以主流的思维形式并不适用在Linux上，因为这时候我们不是消费者，没有任何规定要求发行版要保证用户可以享受舒适的体验，Arch这一流派就更加直白了：你们是计算机爱好者，是热衷于折腾新事物，与其妥协，更愿意投入时间和精力去学习的刁钻用户，我们就是为此而诞生的。</p><p>所以”刁难”用户的理由很简单，不是用户选择了Arch，而且Arch选择了用户。</p><h2 id="Less-is-more"><a href="#Less-is-more" class="headerlink" title="Less is more"></a>Less is more</h2><p>达芬奇的名言“Simplicity is the ultimate form of sophistication”，翻译为“简约是复杂的最终形式”，奉行“简”字的哲学一直是设计圈永恒不变的真理，我从到大也一直认为，一件产品，简单，好用，设计没有多余，用户一看就懂，这就是简约的哲学，这一点在倡导用户体验的消费电子市场已经得到充分的验证。</p><p>那么追随KISS哲学的Arch Linux，又是如何展现自身的Simple呢?</p><p>答案是————让用户明白，<strong>Linux从来不Simple</strong></p><p>Arch的作者之一Aaron Griffin，有过这样的评价：</p><blockquote><p>If you try to hide the complexity of the system, you’ll end up with a more complex system.</p><p>试图隐藏系统复杂性的结果，只会让系统变得更加复杂</p></blockquote><p>让不少人望而生畏的安装过程，就是一个绝佳的例子。</p><p>首先你会遇上很多麻烦，耗费大量时间，走错一步就会强迫自己全盘推到。这么多投入只是为了能让系统正常运作起来，以往的Wndows或者主流发行版为了节省用户时间，将装系统环节装饰得越来越人性化，而Arch却反套路，将操作不当的用户拒之门外，意义何在，为了迎合那些自视甚高的硬核用户吗？</p><p>恰恰相反，前文也提到了Arch的安装是属于入门级的难度，只是前提是在CLI(Command Line Interface)模式下。而且在安装过程中，你会学到比其他任何GUI(Graphical User Interface)安装都实用的知识：</p><ul><li>硬盘分区</li><li>目录挂载</li><li>硬件检测</li><li>网络连接</li><li>选择时区</li><li>设置字符编码</li><li>下载编译工具</li><li>etc</li><li>每一项操作，用CLI透明直观(和痛苦)的形式让用户深入“幕后”，建立起对系统最基础的认知，以确保在未来的使用过程中，一旦遇到问题可以迅速地锁定，并且期待用户逐掌握并拥有解决问题的能力。</li></ul><p>如果换成GUI模式的一笔带过，效果只会大打折扣，正如Araon Griffin所说，GUI用更复杂的系统，向用户隐藏了自身的复杂性，实际上也是在变相加大用户学习的门槛，最终伤害的也是终端用户本身。</p><p>如今越来越Linux发行版走进了大众的视野，希望提供给用户更加“无痛”的体验，Linux的入门难度早就被大量稀释了，之前在油管上看过一部12年的Linux用户交流会(Why Linux Suck)，结论就是如果是早几年接触Linux，最后肯定会灰溜溜地滚回Win7。现在我却选择Arch这条贼船，不是想自虐(一开始是不知道后面各种酸爽的…)，而是在拥有一定Linux经验的基础下，出于深入学习的目的而作出的选择，Arch也非常欢迎这样的用户，更不用说堪称Linux学习宝库的ArchWiki。</p><p>最后再总结一下，需要投入学习成本这件事情，和用户体验从来都是不冲突的，想起了之前疯狂沉迷的&lt;&lt;只狼&gt;&gt;，一个通过让玩家不断积累学习成本，直到产生质变，强势逆转用户体验的完美例子。只要你我都是计算机爱好者，明白并接受Arch流派逆其道而行的用心，从那一刻开始，沉淀了十几年的计算机体验才会迎来一场全新的，充满挑战的Jolly Ride!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;四个月下来我的Linux体验发生很大的变化，从Ubuntu转到了Arch Linux，从十几年的键鼠习惯转到了纯键盘(和触摸板)，手上的matebook从市场新宠成了绝版之子……&lt;/p&gt;
&lt;p&gt;本文不会涉及Arch系统的安装，主要是记录了最近更换系
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu上手记录—基础篇</title>
    <link href="https://thouther.github.io/blog/2019/01/24/Ubuntu%E4%B8%8A%E6%89%8B%E8%AE%B0%E5%BD%95/"/>
    <id>https://thouther.github.io/blog/2019/01/24/Ubuntu上手记录/</id>
    <published>2019-01-24T02:34:21.000Z</published>
    <updated>2019-05-26T08:01:10.864Z</updated>
    
    <content type="html"><![CDATA[<p>最近连续体验到了两次人生三大定律</p><p>第一个是上周换了新的笔记本，告别了陪伴多年的如同坦克一般的游戏本（还是感人的850m），以及坚守多年的Win7。换上了曾经不屑一顾的Win10，终将成为我们讨厌的那个……妈耶，真香！<br>果然9102年了，不能再用Win7了，Win10才是归属！<br>                                    ————<strong>真香定律</strong></p><p>第二个是趁着换电脑的东风，能够重新规划一次硬盘数据（之前的笔记本数据存放真是臃肿不堪），告别了操作僵硬的虚拟机，搞一手双系统，轻度体验一下Linux的赶脚<br>折腾了一天Ubuntu，最后意识到了一点：再也不需要Windows了。<br>                                    ————<strong>香不过三秒定律</strong></p><h1 id="为何选择Ubuntu"><a href="#为何选择Ubuntu" class="headerlink" title="为何选择Ubuntu"></a>为何选择Ubuntu</h1><p>首先Linux存在着数量庞大的发行版（distribution），当下最热门的像Manjora、Mint、elementary、Debian、Fedora，选择Ubuntu则完全是对Linux的先知后觉，装完Ubuntu之后我才了解到原来Linux和各种Linux发行版之前千丝万缕的区别。</p><p><img src="https://i.loli.net/2019/05/26/5cea479443eed91238.jpg" alt=""></p><p>Ubuntu这个词汇在我未接触Linux之前，一直有着非常高的出现率，所以脑内默认Linux→Ubuntu。</p><p>同时Ubuntu也是公认的目前用户基数最大的版本，它最大的好处就是，当遇到问题需要上网需求精准的答案，拥有更多的渠道可以获得想要的资源。</p><h1 id="Linux的优点"><a href="#Linux的优点" class="headerlink" title="Linux的优点"></a>Linux的优点</h1><p>先抛开关于Linux作为开发环境的优势，毕竟自己还没有多少发言权，只说下最直观的感受</p><ul><li><strong>美！</strong><br>只需要一些初步的操作就能让整个UI改头换面，往深一层还拥有超高的自定义内容，任何一个Linux用户都拥有独一无二的桌面，相比之下Win10确实是个弟弟。</li><li><strong>可定制性</strong><br>对于一个坚定的安卓用户来说，这一点有相当高的亲切感，只要对哪一块功能，甚至是哪一处细节不够满意，都可以亲自动手丰衣足食，网上也有足够的教程留给自己折腾（当然在折腾过程中也耗费了大量本应该干正事的时间……）。</li><li><strong>工作区</strong><br>原来我少见多怪，这个功能简直炸裂，多窗口管理的救星！利用桌面的切换来分配不同的工作环境。<br>曾经在Windows上为了减轻自己习惯性多开窗口导致的杂乱无章，尝试过不少采用标签页的文件管理器，但是始终没有想过可以跳出桌面的范畴，Windows的框架限制了我对需求的渴望。</li><li><strong>新鲜感</strong><br>尽管用的是非常大众化的Ubuntu，但是Terminal依然是存在感最高的工具，千奇百怪但能均以高效著称的安装手段，linux独特的层次结构以及对文件的管理和挂载，让人重新重视硬盘快捷键带来的使用效率，大幅提升的屏幕占用比率等等等……越是Windows的老用户才越发感受到这种“外面世界的精彩”。</li><li><strong>全英文化</strong><br>安装系统的时候壕不犹豫的就选择全英文，一方面当然是为了装逼，另一方面也是为了阻断自己对中文环境的依赖性。就像拒绝虚拟机直接投身Linux一般，只有在没退路的情况下，人的求生欲才会变成最可靠的动力（当然最后也不可避免地装上中文输入法）。<br>后来甚至打算将Windows也换成全英文，然而最新版的win10并不支持这个想法。</li></ul><p>喜新厌旧大概是人之常情，但是Linux这几个优点（尤其是美化和自定义）对于Windows来说是绝对碾压的。相反，Windows也有必须存在的理由：</p><ul><li>游戏（重点）</li><li>半个娱乐工具/半个生产力工具（Photoshop、Vegas、Office）</li><li>第一个正版的操作系统</li></ul><p>不难理解那些Linux和Windows之间争吵不休的话题，不过Linux/Unix一直强调的开源精神，其实也是一种倡导包容开放、互相合作的先进科学精神，双系统环境劳逸结合，学习工作的情况用Linux，必要的娱乐情况就用Windows。</p><p>只需要一个重开机的动作，比起因为配置堪忧和性能不够而留下的无奈，这些都不算个事儿。</p><h1 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h1><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="取消sudo密码"><a href="#取消sudo密码" class="headerlink" title="取消sudo密码"></a>取消sudo密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到<code>%sudo ALL=(ALL) ALL</code><br>改为<code>%sudo ALL=(ALL) NOPASSWD: ALL</code></p><h3 id="修改更新源"><a href="#修改更新源" class="headerlink" title="修改更新源"></a>修改更新源</h3><p>在Software &amp; Update中 把服务器手动改为阿里云的即可<br>或者采用终端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/apt/sources/list</span><br></pre></td></tr></table></figure><p>把原有的源修改为下面的地址<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>完全打开互联网大门的四件套，没有它们的存在，整个网络感觉寸步难行</p><h3 id="electron-ssr"><a href="#electron-ssr" class="headerlink" title="electron-ssr"></a>electron-ssr</h3><p>开源的跨平台shadowsockR客户端，功能非常丰富<br>Github地址：<a href="https://github.com/erguotou520/electron-ssr" target="_blank" rel="noopener">https://github.com/erguotou520/electron-ssr</a></p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>目前最强浏览器，光是数据同步和扩展插件，换浏览器的想法是不存在的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure></p><h3 id="Proxy-SwitchOmega"><a href="#Proxy-SwitchOmega" class="headerlink" title="Proxy SwitchOmega"></a>Proxy SwitchOmega</h3><p>Chrome上手后的第一个插件，不多解释<br>官网：<a href="https://www.switchyomega.com/" target="_blank" rel="noopener">https://www.switchyomega.com/</a></p><h3 id="Proxychains"><a href="#Proxychains" class="headerlink" title="Proxychains"></a>Proxychains</h3><p>强制应用的 TCP 连接通过代理的工具，配合electron-ssr使用<br>Github地址：<a href="https://github.com/haad/proxychains" target="_blank" rel="noopener">https://github.com/haad/proxychains</a></p><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><h3 id="fcitx"><a href="#fcitx" class="headerlink" title="fcitx"></a>fcitx</h3><p>小企鹅输入法，是一个以 GPL 方式发布的基于XIM的简体中文输入法框架<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:wengxt/fcitx-nightly &amp;&amp; sudo apt-get update</span><br><span class="line">sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin</span><br><span class="line">sudo apt-get install fcitx-table-all</span><br><span class="line">sudo apt-get install im-switch</span><br></pre></td></tr></table></figure></p><h3 id="搜狗拼音"><a href="#搜狗拼音" class="headerlink" title="搜狗拼音"></a>搜狗拼音</h3><p>原来因为糟糕的卡顿问题放弃了搜狗，换成了轻量级的手心，而Linux上的输入法并没有多少选择，不过Linux的搜狗并不用担心自带广告或弹窗的问题<br>官网：<a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/?r=pinyin</a></p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>重头戏，能把Linux的好感值提高到一个全新的高度，只需要下面几个小小的软件</p><h3 id="gnome-tweak-tool"><a href="#gnome-tweak-tool" class="headerlink" title="gnome tweak tool"></a>gnome tweak tool</h3><p>GNOME 3桌面的设置工具<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br><span class="line">sudo apt install gnome-shell-extensions</span><br></pre></td></tr></table></figure></p><p>###　gnome shell extensions<br>gnome shell的扩展，大幅增强shell的功能性，使用起来更加方便<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user theme开启主题更换</span><br><span class="line">dash to dock底部dock定制</span><br><span class="line">pixel saver最大化时去标题栏</span><br><span class="line">hide top bar 自动隐藏顶部栏</span><br><span class="line">workspace grid工作区定制</span><br></pre></td></tr></table></figure></p><p>插件下载：<a href="https://extensions.gnome.org/" target="_blank" rel="noopener">https://extensions.gnome.org/</a></p><h3 id="gnome-theme"><a href="#gnome-theme" class="headerlink" title="gnome theme"></a>gnome theme</h3><p>gnome的自定义主题下载，包括GTK+主题，shell风格、图标和指针美化<br>脱胎换骨，从这里开始<br><a href="https://www.gnome-look.org/" target="_blank" rel="noopener">https://www.gnome-look.org/</a></p><h3 id="Plank"><a href="#Plank" class="headerlink" title="Plank"></a>Plank</h3><p>dock的魔改,能够实现macOS的效果<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ricotz/docky</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install plank</span><br></pre></td></tr></table></figure></p><p>输入<code>plank -preference</code>进行设置</p><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><p>强大的终端强化工具，能让人重新爱上小黑框<br><strong>安装zsh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">zsh --version</span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"><span class="variable">$SHELL</span> --version</span><br></pre></td></tr></table></figure><p>Github地址：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></p><p><strong>安装oh-my-zsh</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>Github地址：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a><br><strong>更换主题</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"robbyrussell"</span></span><br></pre></td></tr></table></figure></p><p>主题预览：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p><p>介绍：<br><a href="https://www.zhihu.com/question/21418449" target="_blank" rel="noopener">为什么说 zsh 是 shell 中的极品？</a><br><a href="http://blog.51cto.com/shanker/1765036" target="_blank" rel="noopener">使用zsh的十大优点</a></p><h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><h3 id="mpv"><a href="#mpv" class="headerlink" title="mpv"></a>mpv</h3><p>一款开源跨平台的媒体播放器，感觉比自带的老牌VLC好看不少<br>官网：<a href="https://mpv.io/" target="_blank" rel="noopener">https://mpv.io/</a></p><h3 id="nomacs"><a href="#nomacs" class="headerlink" title="nomacs"></a>nomacs</h3><p>一款开源跨平台的图片查看工具，frameless效果好顶赞<br>官网：<a href="https://nomacs.org/" target="_blank" rel="noopener">https://nomacs.org/</a></p><h3 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h3><p>硬盘空间不是很宽裕，不考虑任何本地播发器了，而在线的貌似只有网易云一家有Linux版本，可惜问题多多，比如偶尔直接启动会失灵，得通过终端才行；高分率屏下字体太小。<br>知乎上找到一个适用于UBuntu 18.04的版本<br>Github地址：<a href="https://github.com/innoob/netease-cloud-music" target="_blank" rel="noopener">https://github.com/innoob/netease-cloud-music</a></p><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><p><strong>微信</strong><br>deepin-wine容器的Ubuntu移植版，应该是目前最接近完美的微信解决办法<br>Github地址：<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" target="_blank" rel="noopener">https://github.com/wszqkzqk/deepin-wine-ubuntu</a></p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p>Github出品的重量级编辑器，光是折腾插件的安装就花费了不少时间。<br>目前只有写Markdown的需求，留着以昨日后备用<br>官网：<a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></p><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>相比Atom轻量了不少，第一印象要比Atom高很多，暂时个人不存在判断的资历<br>官网：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><p>轻量+优雅，目前在用的markdown编辑器，源码/预览切换的方式比其他分屏预览要意外地好用很多<br>暂时遇到的缺点就是在源码模式下不支持格式快捷键<br>官网：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="XMind-Zen"><a href="#XMind-Zen" class="headerlink" title="XMind Zen"></a>XMind Zen</h3><p>一直都在用的思维导图工具，Linux的Zen版貌似不用付费也可以使用大部分主要功能<br>官网：<a href="https://www.xmind.net/zen/" target="_blank" rel="noopener">https://www.xmind.net/zen/</a></p><h3 id="Xodo"><a href="#Xodo" class="headerlink" title="Xodo"></a>Xodo</h3><p>试用过好几款Linux的pdf阅读器，感觉都不如之前在win10上体验Xodo那么惊艳，干脆直接上Chrome的Xodo app<br>官网：<a href="https://www.xodo.com/" target="_blank" rel="noopener">https://www.xodo.com/</a></p><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><h3 id="synaptic"><a href="#synaptic" class="headerlink" title="synaptic"></a>synaptic</h3><p>全能的应用下载管理器，能够彻底替换官网那个残废的Ubuntu Software，也是会让人逐渐堕落的工具<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure></p><h3 id="redshift"><a href="#redshift" class="headerlink" title="redshift"></a>redshift</h3><p>能够根据周围环境自动调整屏幕色温的软件，应该成为任何一个系统的标配<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install redshift</span><br></pre></td></tr></table></figure></p><h3 id="stacer"><a href="#stacer" class="headerlink" title="stacer"></a>stacer</h3><p>类似Windows上CCleaner一样的软件，各方面绝对不逊色于CCleaner，关键是免费<br>之前CCleaner天天弹窗暗示我升级Pro<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:oguzhaninan/stacer</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install stacer</span><br></pre></td></tr></table></figure></p><h3 id="sickynotes"><a href="#sickynotes" class="headerlink" title="sickynotes"></a>sickynotes</h3><p>桌面小贴纸，暂时没有找到比较好的工具，先凑合用，缺点主要是不支持一些基本的文本语法，以及不提供归纳功能<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:umang/indicator-stickynotes</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-stickynotes</span><br></pre></td></tr></table></figure></p><h3 id="autokey"><a href="#autokey" class="headerlink" title="autokey"></a>autokey</h3><p>修改映射工具，解决13寸电脑的快捷键问题，不然有很多实用的快捷键用不上，例如Shift+Home/End选取全段文字<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:sporkwitch/autokey</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install autokey-gtk</span><br><span class="line"><span class="comment"># Or alternatively, to install the Qt5 based GUI:</span></span><br><span class="line">sudo apt install autokey-qt</span><br></pre></td></tr></table></figure></p><h3 id="Gnome-Pie"><a href="#Gnome-Pie" class="headerlink" title="Gnome Pie"></a>Gnome Pie</h3><p>一个非常炫酷的程序启动器，貌似不支持两键位唤出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:simonschneegans/testing </span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install gnome-pie</span><br></pre></td></tr></table></figure></p><h2 id="软件大全"><a href="#软件大全" class="headerlink" title="软件大全"></a>软件大全</h2><p>最后发一个Ubuntu/Linux系统软件推荐大合集<br><a href="https://github.com/luong-komorebi/Awesome-Linux-Software" target="_blank" rel="noopener">https://github.com/luong-komorebi/Awesome-Linux-Software</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近连续体验到了两次人生三大定律&lt;/p&gt;
&lt;p&gt;第一个是上周换了新的笔记本，告别了陪伴多年的如同坦克一般的游戏本（还是感人的850m），以及坚守多年的Win7。换上了曾经不屑一顾的Win10，终将成为我们讨厌的那个……妈耶，真香！&lt;br&gt;果然9102年了，不能再用Win7了
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://thouther.github.io/blog/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu下部署Hexo到VPS</title>
    <link href="https://thouther.github.io/blog/2019/01/23/%E5%9C%A8Ubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2Hexo%E5%88%B0VPS/"/>
    <id>https://thouther.github.io/blog/2019/01/23/在Ubuntu下部署Hexo到VPS/</id>
    <published>2019-01-23T09:46:21.000Z</published>
    <updated>2019-05-26T08:03:02.441Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>把之前在Windows上部署Hexo的文章重新写一遍，这次系统换成了Ubuntu，对于整个部署流程也有了一个更清晰的了解，加上VPS那边无需改动，整个操作一气呵成</p><ul><li>本地环境：<code>Ubuntu 18.04 LTS</code></li><li>VPS：<code>CentOS7</code>（搬瓦工+万网域名）</li></ul></blockquote><h1 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h1><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown(或其他渲染引擎)解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a><br>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></blockquote><p>安装并更新Git<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line">add-apt-repository ppa:git-core/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></p><p>查看Git版本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version 2.20.1</span><br></pre></td></tr></table></figure></p><p>使用GIt之前，需要输入以下信息：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name+空格+你的名字</span><br><span class="line">git config --global user.email+空格+你的邮箱</span><br></pre></td></tr></table></figure></p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。 Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p></blockquote><p>先安装npm (NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install npm`</span><br></pre></td></tr></table></figure></p><p>安装并更新Node.js：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install Nodejs`</span><br><span class="line"></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p><p>查看Node.js版本：`<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">v10.15.0</span><br></pre></td></tr></table></figure></p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>建立一个Hexo专用文件夹：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">~~~bash</span><br><span class="line">通过npm安装Hexo并初始化：</span><br><span class="line">~~~bash</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">Hexo int</span><br></pre></td></tr></table></figure></p><p>至此本地部署工作完成，顺便测试下是否成功<br>输入<code>hexo server</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">^CINFO  Farewell</span><br></pre></td></tr></table></figure><p>浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可访问默认主页</p><h1 id="VPS部署Hexo"><a href="#VPS部署Hexo" class="headerlink" title="VPS部署Hexo"></a>VPS部署Hexo</h1><p>在Ubuntu上用终端<strong>Terminal</strong>和自带的文件管理器<strong>Nautilus</strong>就可以直连服务器，SSH和sftp管理操作一步到位，非常舒服√</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><blockquote><p><a href="https://www.nginx.com/" target="_blank" rel="noopener">https://www.nginx.com/</a><br>Nginx是一个网页服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，以及一个负载均衡器和一个HTTP缓存。相较于Apache、lighttpd，Nginx具有占有内存少，稳定性高等优势。</p></blockquote><p>添加CentOS 7 Nginx yum资源库：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>安装Nginx：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></p><p>启动nginx：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure></p><p>打开域名IP，显示Welcome to Nginx</p><p>配置Nginx<br>修改<code>/etc/nginx/conf.d/default.conf</code>的<code>server_name</code>，保存退出<br>查看配置是否有错误：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t`</span><br></pre></td></tr></table></figure></p><p>运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br><span class="line">Active: active (running)</span><br></pre></td></tr></table></figure></p><h2 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h2><p>CentOS7中虽然自带Git，不过依然需要更新，过程有点麻烦<br>先安装Git的依赖包：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></p><p>删除已有的Git：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure></p><p>下载&amp;安装Git源码：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.20.1.tar.gz</span><br><span class="line">tar xzf git-2.20.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> git-2.20.1</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure></p><p>查看当前版本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">git version 2.20.1</span><br></pre></td></tr></table></figure></p><p>记得使用前输入个人信息<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name+空格+你的名字</span><br><span class="line">git config --global user.email+空格+你的邮箱</span><br></pre></td></tr></table></figure></p><h2 id="创建Git用户"><a href="#创建Git用户" class="headerlink" title="创建Git用户"></a>创建Git用户</h2><p>创建用户，设置密码并赋予sudo权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git`</span><br><span class="line">passwd git`</span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vi /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>添加：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root ALL=(ALL:ALL) ALL</span><br><span class="line">git ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></p><p>再修改回文件权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 440 /etc/sudoers</span><br></pre></td></tr></table></figure></p><h2 id="配置ssh登陆"><a href="#配置ssh登陆" class="headerlink" title="配置ssh登陆"></a>配置ssh登陆</h2><p>生成密钥：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa`</span><br></pre></td></tr></table></figure></p><p>直接回车会在~/.ssh目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>密钥下载到本地，公钥改名</p><p>设置authorized_keys文件的权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">cp id_rsa.pub authorized_keys</span><br><span class="line">chmod 700 authorized_keys</span><br></pre></td></tr></table></figure></p><p>修改sshd_config：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config`</span><br></pre></td></tr></table></figure></p><p>找到下面代码前的#并删除<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure></p><p>重启ssh服务：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure></p><p>切换git用户，创建.ssh文件夹：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">mkdir ~/.ssh</span><br></pre></td></tr></table></figure></p><p>创建authorized_keys文件并把刚才下载密钥内容粘贴进去<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>修改以下两处的权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorzied_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure></p><p>这时候可以在本地通过终端<code>ssh git@vps地址</code>测试能否登陆</p><h2 id="创建git裸库"><a href="#创建git裸库" class="headerlink" title="创建git裸库"></a>创建git裸库</h2><p>返回git目录，使用git用户创建git裸仓库：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure></p><p>创建网站目录：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br><span class="line">mkdir blog</span><br><span class="line">chown git:git -R /var/www/blog</span><br></pre></td></tr></table></figure></p><p>检查三个权限：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll -a /var/www/</span><br><span class="line">ll -a /home/git/</span><br></pre></td></tr></table></figure></p><h2 id="配置git-hooks"><a href="#配置git-hooks" class="headerlink" title="配置git-hooks"></a>配置git-hooks</h2><p>编辑<code>post-receive</code>文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> /home/git/blog.git/hooks</span><br><span class="line">vi post-receive</span><br></pre></td></tr></table></figure></p><p>输入以下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --work-tree=/home/git --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure></p><p>赋予<code>post-receive</code>执行权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure></p><p>最后将git目录所有权设置为<code>git</code>。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">chown -R git:git hexo.git</span><br></pre></td></tr></table></figure></p><p>至此服务器端的配置结束</p><h1 id="实现自动化部署"><a href="#实现自动化部署" class="headerlink" title="实现自动化部署"></a>实现自动化部署</h1><p>回到本地端，修改Hexo目录下的<code>_config.yml</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">      type: git</span><br><span class="line">      repo: git@服务器地址:/home/git/hexo.git</span><br><span class="line">      branch: master</span><br></pre></td></tr></table></figure></p><p>安装git的push插件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>最后将本地目录生成静态网页并推送到VPS<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p><p>完事</p><h1 id="总结流程坑点"><a href="#总结流程坑点" class="headerlink" title="总结流程坑点"></a>总结流程坑点</h1><p>1.没搞清本地的hexo安装路径<br>2.没搞清远程的hexo安装路径<br>3.nginx的<code>default.conf</code>配置问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root   /home/git/thouther;</span><br></pre></td></tr></table></figure></p><p>4.hooks里的<code>post-receive</code>配置问题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --work-tree=/home/git/thouther/--git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>1.<a href="https://www.jianshu.com/p/b1eeb3f1a2c1" target="_blank" rel="noopener">linux使用密钥+密码登录ssh（centos7）</a><br>2.<a href="http://www.zigma.cc/2018/06/27/%E3%80%90Hexo%E3%80%91%E4%BB%8EWordpress%E8%BD%ACHexo%E7%9A%84%E9%82%A3%E4%BA%9B%E6%B7%B1%E5%9D%91/#%C2%B7-%E6%B7%BB%E5%8A%A0Nginx%E5%88%B0YUM%E6%BA%90" target="_blank" rel="noopener">【Hexo】从Wordpress转Hexo的那些深坑</a><br>3.<a href="https://pengloo53.gitbooks.io/hexo/" target="_blank" rel="noopener">Hexo小书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;把之前在Windows上部署Hexo的文章重新写一遍，这次系统换成了Ubuntu，对于整个部署流程也有了一个更清晰的了解，加上VPS那边无需改动，整个操作一气呵成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境：&lt;code&gt;Ubuntu 18.04 LTS&lt;/
      
    
    </summary>
    
    
      <category term="避坑" scheme="https://thouther.github.io/blog/tags/%E9%81%BF%E5%9D%91/"/>
    
      <category term="Ubuntu" scheme="https://thouther.github.io/blog/tags/Ubuntu/"/>
    
      <category term="hexo" scheme="https://thouther.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Win10/Ubuntu双系统的安装操作</title>
    <link href="https://thouther.github.io/blog/2019/01/23/Win10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C/"/>
    <id>https://thouther.github.io/blog/2019/01/23/Win10-Ubuntu双系统的安装操作/</id>
    <published>2019-01-23T09:32:38.000Z</published>
    <updated>2019-05-26T08:11:00.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>双系统 or 虚拟机？<br>一个是真实的操作系统，另一个只是Windows上的模拟器。<br>如果不想去面对双系统环境下有点复杂的硬盘数据管理问题，虚拟机的存在就是为我们提供便利的权宜之计。<br>但是如果想更深入去感受Linux的魅力，首先你要做的就是：<br><strong>彻底告别Windows！</strong></p></blockquote><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><p>完全投身Linux之前，各方面的准备必须充足，毕竟涉及到关键的硬盘数据，网上据说因为装双系统把windows也赔进去的选手不在少数。</p><h2 id="一个Ubuntu-18-04-LTS-启动盘"><a href="#一个Ubuntu-18-04-LTS-启动盘" class="headerlink" title="一个Ubuntu 18.04 LTS 启动盘"></a>一个Ubuntu 18.04 LTS 启动盘</h2><p><strong>1.一个大于4G的U盘</strong></p><p><strong>2.从Ubuntu官网下载18.04 LTS的镜像</strong><br><a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a></p><p><strong>3.利用镜像工具将ISO写入U盘中</strong><br>这里采用的是UltraISO，过程非常简单，写入之前需要进行U盘格式化。<br><a href="https://www.ultraiso.com/" target="_blank" rel="noopener">https://www.ultraiso.com/</a></p><p><strong>4.提前下载好必备的deb安装包</strong><br>不要误会，Ubuntu安装完成后，只要连接wifi，是可以直接正常联网的。<br>所以在<strong>正常联网</strong>的环境下还需要提前准备什么呢？这点大家各有各的手段。<br>对我来说是Chrome+Proxy SwitchOmega+electron-ssr的组合combo，完全避开国内那些烦人的下载站。</p><h2 id="为Ubuntu系统进行硬盘分区"><a href="#为Ubuntu系统进行硬盘分区" class="headerlink" title="为Ubuntu系统进行硬盘分区"></a>为Ubuntu系统进行硬盘分区</h2><p><strong>1.在Win10的磁盘管理中进行分区</strong><br>压缩卷之后获得一块<strong>未分配空间</strong>即可，安装Ubuntu的时候也容易识别。<br>建议分配至少100G，既然是双系统，最好不要吝啬分配Ubuntu的磁盘空间，免得后期容量不够抓襟见肘。</p><p><strong>2.学习Ubuntu文件系统的基本知识</strong><br>了解文件系统是认识Linux的第一步，也是非常重要的一环。<br>只要做好这方面的功课，便可以顺利避开后期安装中令人头疼的内部硬盘分配问题。</p><p>后面会涉及到以下四个重要分区</p><ul><li><p>/: 是一切目录的起点，如大树的主干。其它的所有目录都是基于树干的枝条或者枝叶。在 ubuntu 中硬件设备如光驱、软驱、usb 设备都将挂载到这颗繁茂的枝干之下，作为文件来管理。<br>相当于Windows的C盘，同时也是所有软件安装的位置，不同于Windows可以指定任意安装路径，Linux下的软件是散布各个对应的功能文件夹之中。</p><p><strong>分配建议：30G以上</strong>，第一次安装时不知道看了哪个教程只分配了10G，以为这个真的只是“C盘”，折腾了一天之后越想越不对，第二天面对剩余空间为0的系统盘符，场面十分尴尬。</p></li><li><p>swap: 交换空间。当系统物理内存吃紧时，Linux会将内存中不常访问的数据保存到swap上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问swap上存储的内容时，再将swap上的数据加载到内存中。<br>简单来说就是相当于虚拟内存的存在<br>相关知识：<br><a href="https://www.jianshu.com/p/a2d2f284fc0a" target="_blank" rel="noopener">物理内存／虚拟内存／swap分区</a><br><a href="https://segmentfault.com/a/1190000008125116" target="_blank" rel="noopener">Linux交换空间（swap space）</a></p><p><strong>分配建议：系统内存的1.5倍</strong></p></li><li><p>/boot: 这里存放的是Linux内核和系统启动文件。关系到电脑启动后对于双系统的引导问题，需要谨慎对待</p><p><strong>分配建议：500M</strong>，一些安装旧版Ubuntu教程只分配200M，结果自己用18.04亲测后安装报错，网上一查可能是boot分配空间太小，以防万一还是分配500M比较保险</p></li><li><p>/home: 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p><strong>分配建议：剩下全部</strong></p></li></ul><h1 id="安装阶段"><a href="#安装阶段" class="headerlink" title="安装阶段"></a>安装阶段</h1><p>掌握完所有必要的内容，可以完全关闭Windows，正式进入Ubuntu</p><h2 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h2><p><strong>1.进入开机后的启动菜单</strong></p><p><strong>2.关闭Security Boot（安全启动）</strong></p><p><strong>3.将U盘作为首选启动项</strong></p><h2 id="正式安装Ubuntu"><a href="#正式安装Ubuntu" class="headerlink" title="正式安装Ubuntu"></a>正式安装Ubuntu</h2><p><strong>1.磁盘分区</strong><br>前面的基础安装第三方安装影响不大，关键在于中间的<strong>Ubuntu磁盘分区</strong><br>一定要选择其他选项，亲自为系统进行分区</p><table><thead><tr><th>大小</th><th>新分区的类型</th><th>新分区的位置</th><th>用于</th><th>挂载点</th><th>用途</th></tr></thead><tbody><tr><td>35G</td><td>主分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td><td>/</td><td>存放系统和软件</td></tr><tr><td>12G</td><td>逻辑分区</td><td>空间起始位置</td><td>交换空间</td><td>swap</td><td>虚拟内存</td></tr><tr><td>500M</td><td>逻辑分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td><td>/boot</td><td>引导分区</td></tr><tr><td>剩下</td><td>逻辑分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td><td>/home</td><td>用户存储数据</td></tr></tbody></table><p><strong>2.安装启动引导器</strong><br>分配完空间后不要贪一时手速，还有下图的一个重要操作<br><img src="https://i.loli.net/2019/05/26/5cea4a017df6660355.png" alt=""></p><p>结束上面两个环节后，基本上大功告成了，接下来静候佳音即可</p><h1 id="设置引导（可选）"><a href="#设置引导（可选）" class="headerlink" title="设置引导（可选）"></a>设置引导（可选）</h1><p>如果想让Ubuntu作为第一启动项的话，需要切回Win10，下载EasyBCD（采用UEFI启动的电脑得使用另一个软件EasyUEFI）进行设置</p><p>个人认为这个环节并非必要，虽然每次重启都得进入启动菜单，但是保留Win10作为第一启动项可以保障一定限度的系统安全。</p><p>后期如果想卸载Ubuntu，可以直接从Win10的磁盘管理进行删除卷，避免出现误删引导文件的情况</p><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><p><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E6%A0%87%E5%87%86" target="_blank" rel="noopener">维基百科：文件系统层次结构标准</a>（Filesystem Hierarchy Standard）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;双系统 or 虚拟机？&lt;br&gt;一个是真实的操作系统，另一个只是Windows上的模拟器。&lt;br&gt;如果不想去面对双系统环境下有点复杂的硬盘数据管理问题，虚拟机的存在就是为我们提供便利的权宜之计。&lt;br&gt;但是如果想更深入去感受Linux的魅力，首先你要
      
    
    </summary>
    
    
      <category term="避坑" scheme="https://thouther.github.io/blog/tags/%E9%81%BF%E5%9D%91/"/>
    
      <category term="Ubuntu" scheme="https://thouther.github.io/blog/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>2019，新环境，新的开始</title>
    <link href="https://thouther.github.io/blog/2019/01/22/2019%EF%BC%8C%E6%96%B0%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://thouther.github.io/blog/2019/01/22/2019，新环境，新的开始/</id>
    <published>2019-01-22T13:24:41.000Z</published>
    <updated>2019-05-26T07:55:05.293Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/05/26/5cea44d05cf6935675.png" alt=""></p><h3 id="2019只有两件事"><a href="#2019只有两件事" class="headerlink" title="2019只有两件事"></a>2019只有两件事</h3><ul><li>考研</li><li>学一门语言</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/26/5cea44d05cf6935675.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2019只有两件事&quot;&gt;&lt;a href=&quot;#2019只有两件事&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="学习" scheme="https://thouther.github.io/blog/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
